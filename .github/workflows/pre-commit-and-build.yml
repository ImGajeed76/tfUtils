name: Python Application CI/CD

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'

permissions:
  contents: write
  pull-requests: read

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files

  build-dev:
    needs: pre-commit
    if: |
      github.ref == 'refs/heads/master' &&
      contains(github.event.head_commit.message, '--dev-build')
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Inno Setup
        run: |
          # Try to install Inno Setup
          choco install innosetup -y

          # Proper PowerShell environment refresh
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          Update-SessionEnvironment

          # Verify Inno Setup is available
          if (-not (Get-Command "iscc.exe" -ErrorAction SilentlyContinue)) {
            Write-Error "Inno Setup Compiler (iscc.exe) not found in PATH"
            exit 1
          }
        shell: pwsh

      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Get poetry cache dir
        id: poetry-cache
        run: |
          echo "dir=$(poetry config cache-dir)" >> $env:GITHUB_OUTPUT

      - name: Cache poetry dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Build executable
        run: poetry run python build.py
        env:
          PYTHONOPTIMIZE: 2

      - name: Get current datetime
        id: datetime
        run: |
          echo "datetime=$(Get-Date -Format 'yyyy-MM-dd-HH-mm')" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create pre-release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/tfutils_setup_v*.exe
            dist/tfutils/verification.json
            dist/tfutils/SHA256SUMS.txt
          prerelease: true
          name: "Development Build ${{ steps.datetime.outputs.datetime }}"
          tag_name: "dev-${{ steps.datetime.outputs.datetime }}-${{ github.sha }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-build:
    needs: pre-commit
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Inno Setup
        run: |
          # Try to install Inno Setup
          choco install innosetup -y

          # Proper PowerShell environment refresh
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          Update-SessionEnvironment

          # Verify Inno Setup is available
          if (-not (Get-Command "iscc.exe" -ErrorAction SilentlyContinue)) {
            Write-Error "Inno Setup Compiler (iscc.exe) not found in PATH"
            exit 1
          }
        shell: pwsh

      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Get poetry cache dir
        id: poetry-cache
        run: |
          echo "dir=$(poetry config cache-dir)" >> $env:GITHUB_OUTPUT

      - name: Cache poetry dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Build executable
        run: poetry run python build.py
        env:
          PYTHONOPTIMIZE: 2

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/tfutils_setup_v*.exe
            dist/tfutils/verification.json
            dist/tfutils/SHA256SUMS.txt
          name: "Release ${{ github.ref_name }}"
          body: |
            Release ${{ github.ref_name }}

            ## Verification
            SHA256 checksums are provided in the SHA256SUMS.txt file.
            Additional verification information can be found in verification.json.

            ## Installation
            1. Download tfutils_setup_v*.exe
            2. Run the installer
            3. Choose "Add to PATH" during installation
            4. Restart any open terminals
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
