{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TF Utils","text":"<p>TF Utils is a powerful, user-friendly tool designed specifically for TFBern students to streamline their project management workflow. Whether you're just starting out or working on advanced projects, TF Utils provides the automation and structure you need to work more efficiently.</p>"},{"location":"#what-is-tf-utils","title":"\ud83c\udfaf What is TF Utils?","text":"<p>TF Utils is an unofficial, student-created toolkit that enhances your workflow with TFBern projects. Born from real student experiences, it addresses common challenges and automates repetitive tasks, helping you:</p> <ul> <li>Save Time: Automate routine project setup and management tasks</li> <li>Reduce Errors: Follow best practices with built-in templates and structures</li> <li>Work Smarter: Integrate seamlessly with tools like Altium, Obsidian, Office, and \u00b5Vision</li> <li>Stay Organized: Maintain consistent project structures across all your work</li> </ul> <p>\ud83c\udf93 Created by Students, for Students While TF Utils isn't an official TFBern tool, it's crafted by students who understand your needs firsthand. We've experienced the same challenges you face and built solutions that actually work in practice.</p>"},{"location":"#why-choose-tf-utils","title":"Why Choose TF Utils?","text":"<ul> <li>User-Friendly Interface: Navigate easily with our interactive command-line menu</li> <li>Zero Configuration: Works right out of the box with smart defaults</li> <li>Flexible &amp; Extensible: Adapt the tool to your specific workflow</li> <li>Security-First Design: Open source, no admin rights required, transparent build process</li> <li>Active Community: Get help when you need it from fellow students</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Getting started with TF Utils is easy:</p> <ol> <li>Download the latest installer from our releases page</li> <li>Run the installer and check \"Add to PATH\" during installation</li> <li>Open your project folder and type <code>tfutils</code> in the address bar</li> </ol> <p>That's it! You're ready to start managing your projects more efficiently.</p>"},{"location":"#features-at-a-glance","title":"Features at a Glance","text":"<ul> <li>Project Templates: Start new projects with the correct structure instantly</li> <li>File Management: Organize your project files automatically</li> <li>Tool Integration: Seamless setup for:<ul> <li>Altium Projects</li> <li>Obsidian Notes</li> <li>Office Documents</li> <li>\u00b5Vision Projects</li> </ul> </li> <li>Smart Prompts: Clear guidance through each operation</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<p>Join our active community of TFBern students:</p> <ul> <li>\ud83d\udcdd Report Issues</li> <li>\ud83d\udca1 Join Discussions</li> <li>\ud83d\udce7 Contact Us</li> </ul>"},{"location":"#license","title":"License","text":"<p>TF Utils is open source software, licensed under the GNU GPL v3.0. This means you have the freedom to:</p> <ul> <li>Use the software for any purpose</li> <li>Study how it works and modify it</li> <li>Share the software with others</li> <li>Share your modifications</li> </ul> <p>View Full License</p> <p>Ready to get started? Check out our Installation Guide or dive into the User Guide to learn more!</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>This guide will walk you through installing TF Utils on your system. The process is straightforward and doesn't require administrative privileges.</p>"},{"location":"installation/#quick-installation-recommended","title":"Quick Installation (Recommended)","text":""},{"location":"installation/#1-download-the-installer","title":"1. Download the Installer","text":"<ol> <li>Visit our releases page</li> <li>Look for the latest version</li> <li>Download <code>tfutils_setup_vX.X.X.exe</code> <p>\ud83d\udca1 Tip: Always download the latest version to get the newest features and security updates</p> </li> </ol>"},{"location":"installation/#2-run-the-installer","title":"2. Run the Installer","text":"<ol> <li>Locate the downloaded <code>tfutils_setup_vX.X.X.exe</code> file</li> <li>Double-click to run the installer</li> <li>Follow the installation wizard:<ul> <li>Click \"Next\" to begin</li> <li>Choose installation location (default is recommended)</li> <li>Important: Check \"Add to PATH\" \u2705</li> <li>Click \"Install\"</li> <li>Wait for installation to complete</li> <li>Click \"Finish\"</li> </ul> </li> </ol>"},{"location":"installation/#3-verify-installation","title":"3. Verify Installation","text":"<ol> <li>Close any open command prompts or terminals</li> <li>Open a new command prompt</li> <li>Type <code>tfutils</code> and press Enter</li> <li>You should see the TF Utils selection menu</li> <li>Exit by pressing <code>Ctrl+C</code> or <code>esc</code></li> </ol> <pre><code>tfutils\n</code></pre>"},{"location":"installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Windows 10 or newer</li> </ul>"},{"location":"installation/#advanced-installation-methods","title":"Advanced Installation Methods","text":""},{"location":"installation/#manual-installation-for-advanced-users","title":"Manual Installation (For Advanced Users)","text":"<p>If you prefer not to use the installer, you can install TF Utils manually:</p> <ol> <li>Download the source code</li> <li>Install Python 3.10</li> <li>Install Poetry</li> <li>Run <code>poetry install</code></li> <li>Run <code>poetry run python build.py</code></li> <li>The <code>dist</code> directory will contain the built executables and installer</li> </ol> <pre><code># Clone repository\ngit clone https://github.com/ImGajeed76/tfUtils.git\n\n# Install dependencies\ncd tfUtils\npoetry install\n\n# Run TF Utils\npoetry run python build.py\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":""},{"location":"installation/#tfutils-is-not-recognized","title":"\"tfutils is not recognized\"","text":"<p>This usually means the PATH wasn't set correctly. Solutions:</p> <ol> <li>Run the installer again and ensure \"Add to PATH\" is checked</li> <li>Or manually add the installation directory to your PATH</li> <li>Restart your terminal/command prompt</li> </ol>"},{"location":"installation/#python-version-conflict","title":"\"Python version conflict\"","text":"<p>If you see Python version errors:</p> <ol> <li>Ensure you have Python 3.10 installed</li> <li>Uninstall other Python versions if necessary</li> </ol>"},{"location":"installation/#installation-fails","title":"Installation Fails","text":"<p>If the installation fails:</p> <ol> <li>Check you have sufficient disk space</li> <li>Download a fresh copy of the installer</li> </ol>"},{"location":"installation/#verifying-installation-security","title":"Verifying Installation Security","text":"<p>TF Utils provides SHA256 checksums for all releases. To verify your download:</p> <ol> <li>Download the checksum file (<code>SHA256SUMS</code>)</li> <li>Run in PowerShell:    <pre><code>Get-FileHash tfutils_setup_vX.X.X.exe -Algorithm SHA256\n</code></pre></li> <li>Compare the output with the checksum in <code>SHA256SUMS</code></li> <li>You will notice the following:<ol> <li>\"Why didn't GitHub download the file?\" - Seems like it's because the file has no ending. Right-Click on the file    and click \"Open link in new tab\" to download the file.</li> <li>\"The checksum doesn't match!\" - Yeah I know, currently the file doesn't provide the setup file's checksum. I will    fix this in the future. \ud83d\ude47\u200d\u2642\ufe0f</li> </ol> </li> </ol>"},{"location":"installation/#uninstallation","title":"Uninstallation","text":"<p>To remove TF Utils:</p> <ol> <li> <p>Using Windows Settings:</p> <ul> <li>Open Windows Settings</li> <li>Go to Apps &amp; Features</li> <li>Search for \"TF Utils\"</li> <li>Click Uninstall</li> </ul> </li> <li> <p>Manual Cleanup:</p> <ul> <li>Delete the installation directory</li> <li>Remove the PATH entry</li> </ul> </li> </ol>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<p>If you encounter any installation issues:</p> <ul> <li>Search existing issues</li> <li>Ask in our community discussions</li> <li>Report a new issue</li> </ul>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Now that you've installed TF Utils, you might want to:</p> <ul> <li>Read the User Guide to learn basic usage</li> </ul>"},{"location":"license/","title":"License","text":"<p>TF Utils is proudly released under the GNU General Public License v3.0 (GPL-3.0). This license was chosen to ensure that the software remains free and open, protecting the rights of both users and developers.</p>"},{"location":"license/#your-rights-under-gpl-30","title":"Your Rights Under GPL-3.0","text":"<p>When using TF Utils, you have the following freedoms:</p>"},{"location":"license/#freedom-to-use","title":"\u2705 Freedom to Use","text":"<ul> <li>Run the program for any purpose</li> <li>Use it in any environment</li> <li>Use it for any type of project</li> <li>No restrictions on who can use it</li> </ul>"},{"location":"license/#freedom-to-study","title":"\u2705 Freedom to Study","text":"<ul> <li>Access the complete source code</li> <li>Study how the software works</li> <li>Learn from its implementation</li> <li>Understand the codebase</li> </ul>"},{"location":"license/#freedom-to-share","title":"\u2705 Freedom to Share","text":"<ul> <li>Distribute copies of the original program</li> <li>Share it with other students</li> <li>Include it in your own projects</li> <li>Distribute it through any medium</li> </ul>"},{"location":"license/#freedom-to-modify","title":"\u2705 Freedom to Modify","text":"<ul> <li>Adapt the software to your needs</li> <li>Make improvements</li> <li>Fix bugs</li> <li>Add new features</li> <li>Create derivative works</li> </ul>"},{"location":"license/#your-responsibilities","title":"Your Responsibilities","text":"<p>While GPL-3.0 grants you many freedoms, it also comes with some responsibilities:</p> <ol> <li> <p>Source Code Distribution</p> <ul> <li>If you distribute the software, you must also make the source code available</li> <li>Any modifications must also be released under GPL-3.0</li> </ul> </li> <li> <p>License and Copyright Notices</p> <ul> <li>You must keep all original copyright notices</li> <li>You must include the full text of the GPL-3.0 license</li> <li>You must state significant changes made to the software</li> </ul> </li> <li> <p>No Additional Restrictions</p> <ul> <li>You cannot add restrictions beyond those of the GPL-3.0</li> <li>You cannot convert the software to a proprietary license</li> </ul> </li> </ol>"},{"location":"license/#why-gpl-30","title":"Why GPL-3.0?","text":"<p>We chose GPL-3.0 for TF Utils because:</p> <ul> <li>It ensures the software remains free and open source</li> <li>It protects user freedoms</li> <li>It encourages collaboration and sharing</li> <li>It aligns with educational values</li> <li>It promotes transparency and trust</li> </ul>"},{"location":"license/#finding-the-full-license","title":"Finding the Full License","text":"<p>The complete GPL-3.0 license text can be found in several places:</p> <ol> <li>In the repository's <code>LICENSE</code> file</li> <li>On the GNU website</li> <li>Included with every release of TF Utils</li> </ol>"},{"location":"license/#contact","title":"Contact","text":"<p>If you have any questions about the license or how you can use TF Utils, please reach out:</p> <ul> <li>\ud83d\udcdd Open an Issue</li> <li>\ud83d\udca1 Start a Discussion</li> <li>\ud83d\udce7 Email Us</li> </ul>"},{"location":"license/#disclaimer","title":"Disclaimer","text":"<p>This page provides a human-readable summary of (and not a substitute for) the license. For the full legal text, please see the LICENSE file or visit the GNU GPL-3.0 license page.</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>This guide will help you get started with TF Utils and make the most of its features. Whether you're a new user or looking to explore advanced features, you'll find everything you need here.</p>"},{"location":"user-guide/#getting-started","title":"Getting Started","text":""},{"location":"user-guide/#launching-tf-utils","title":"Launching TF Utils","text":"<p>There are several ways to start TF Utils:</p> <ol> <li> <p>From File Explorer (Recommended):</p> <ul> <li>Open your project folder in File Explorer</li> <li>Click in the address bar at the top</li> <li>Type <code>tfutils</code> and press Enter</li> </ul> </li> <li> <p>From Command Prompt/Terminal:</p> <ul> <li>Open a terminal in your project directory</li> <li>Run the command <code>tfutils</code></li> </ul> </li> </ol>"},{"location":"user-guide/#navigating-the-menu","title":"Navigating the Menu","text":"<p>TF Utils uses an intuitive, interactive menu system:</p> <ul> <li>Use <code>\u2191</code> and <code>\u2193</code> arrow keys to move between options</li> <li>Press <code>Enter</code> to select the highlighted option</li> <li>Or simply use your mouse! Wait what? Yes, you can use your mouse to select options.</li> <li>If you want to be really fancy, you can press <code>ctrl + p</code> to open the search bar and search for the option you want!</li> </ul>"},{"location":"user-guide/#core-features","title":"Core Features","text":""},{"location":"user-guide/#project-templates","title":"Project Templates","text":"<p>TF Utils provides pre-configured templates for common project types:</p>"},{"location":"user-guide/#altium-projects","title":"Altium Projects","text":"<ul> <li>Copies the Altium project template</li> <li>Changes the project name and version</li> </ul>"},{"location":"user-guide/#obsidian-notes","title":"Obsidian Notes","text":"<ul> <li>Establishes note-taking workspace</li> <li>Sets up templates for:</li> <li>Daily Journal (Press <code>ctrl + shift + j</code> to create a new daily journal)</li> <li>Configures recommended plugins</li> <li>Excalidraw</li> <li>Numerals</li> <li>Better Word Count</li> <li>OZ Calendar</li> <li>Obsidian Banners</li> <li>Obsidian File Cleaner</li> <li>Quick Add</li> <li>Table Editor</li> <li>Code Block Customizer</li> </ul>"},{"location":"user-guide/#office-documents","title":"Office Documents","text":"<ul> <li>Copies document templates</li> </ul>"},{"location":"user-guide/#vision-projects","title":"\u00b5Vision Projects","text":"<ul> <li>Copies the \u00b5Vision project template</li> <li>Configures project name and version</li> <li>Configures project as CLion project (optional)</li> </ul>"},{"location":"user-guide/#smart-prompts","title":"Smart Prompts","text":"<p>Every operation includes clear guidance:</p> <ul> <li>Step-by-step instructions</li> <li>Validation of inputs</li> </ul>"},{"location":"user-guide/#tips-and-tricks","title":"Tips and Tricks","text":""},{"location":"user-guide/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li><code>ctrl + c</code>: Exit the program</li> <li><code>ctrl + p</code>: Open the search bar</li> </ul>"},{"location":"user-guide/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Search existing issues</li> <li>Join our discussions</li> <li>Create a new issue with:<ul> <li>Clear description</li> <li>Steps to reproduce</li> <li>System information</li> </ul> </li> </ol>"},{"location":"user-guide/#next-steps","title":"Next Steps","text":"<ul> <li>Contribute to development</li> </ul>"},{"location":"development/components/","title":"Core Components","text":"<p>TF Utils is built on several key components that work together to provide a robust and user-friendly interface. This document details the core components and their usage.</p>"},{"location":"development/components/#interface-decorator","title":"Interface Decorator","text":"<p>The interface decorator is the primary way to create new commands in TF Utils. It uses Textual for the UI and supports async operations.</p> <pre><code>from textual.containers import Container\nfrom src.lib.interface import interface\n\n@interface(\"Command Name\", activate=True)\nasync def my_command(container: Container):\n    \"\"\"\n    Your command implementation here.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"development/components/#parameters","title":"Parameters","text":"<ul> <li><code>name</code>: The name that will appear in the menu</li> <li><code>activate</code>: Boolean or callable that determines if the command should be active</li> </ul>"},{"location":"development/components/#example","title":"Example","text":"<pre><code>@interface(\"Neuen Obsidian Vault erstellen\")\nasync def create_new_obsidian_vault(container: Container):\n    \"\"\"\n    Creates a new Obsidian vault with preconfigured settings and plugins.\n\n    This command will:\n    1. Ask for the vault name\n    2. Create the directory\n    3. Copy template files\n    4. Set up recommended plugins\n    \"\"\"\n    vault_name = await ask_input(\n        container,\n        \"Vault Name\",\n        \"Wie soll dein neuer Vault hei\u00dfen?\"\n    )\n\n    # Implementation details...\n</code></pre>"},{"location":"development/components/#console-utilities","title":"Console Utilities","text":"<p>The console module provides user interaction components built on Textual. These components offer a consistent, user-friendly interface for common operations.</p>"},{"location":"development/components/#ask_input","title":"ask_input","text":"<p>Prompts the user for text input with optional validation.</p> <pre><code>async def ask_input(\n    container: Container,\n    question: str,\n    placeholder: str = \"\",\n    password: bool = False,\n    regex: str = r\"[\\u0000-\\uFFFF]*\",\n    # ... other options\n) -&gt; str\n</code></pre>"},{"location":"development/components/#example-usage","title":"Example Usage","text":"<pre><code>name = await ask_input(\n    container,\n    \"Enter project name\",\n    placeholder=\"MyProject\",\n    regex=r\"[A-Za-z0-9_-]+\"\n)\n</code></pre>"},{"location":"development/components/#ask_yes_no","title":"ask_yes_no","text":"<p>Creates a Yes/No prompt with keyboard shortcuts.</p> <pre><code>async def ask_yes_no(\n    container: Container,\n    question: str,\n    yes_text: str = \"Yes\",\n    no_text: str = \"No\",\n    default: bool = True\n) -&gt; bool\n</code></pre>"},{"location":"development/components/#example-usage_1","title":"Example Usage","text":"<pre><code>if await ask_yes_no(container, \"Create backup before proceeding?\"):\n    # Handle yes case\n</code></pre>"},{"location":"development/components/#ask_select","title":"ask_select","text":"<p>Creates a selection menu from a list of options.</p> <pre><code>async def ask_select(\n    container: Container,\n    question: str,\n    options: list[str]\n) -&gt; str\n</code></pre>"},{"location":"development/components/#example-usage_2","title":"Example Usage","text":"<pre><code>template = await ask_select(\n    container,\n    \"Select project template\",\n    [\"Basic\", \"Advanced\", \"Custom\"]\n)\n</code></pre>"},{"location":"development/components/#file-system-operations","title":"File System Operations","text":"<p>The utils module provides robust file system operations with progress tracking and error handling.</p>"},{"location":"development/components/#key-features","title":"Key Features","text":"<ul> <li>Asynchronous file operations</li> <li>Progress bars for long operations</li> <li>Concurrent file copies</li> <li>Network path support</li> <li>Error handling and recovery</li> </ul>"},{"location":"development/components/#common-operations","title":"Common Operations","text":"<pre><code># Copy a single file\nawait safe_copy_file(container, source, destination)\n\n# Copy entire directory\nawait safe_copy_directory(container, source, destination)\n\n# Download file from URL\nawait safe_download(container, url, destination)\n\n# List files in directory\nfiles = await get_copied_files(container, directory)\n</code></pre>"},{"location":"development/components/#progress-tracking","title":"Progress Tracking","text":"<p>File operations automatically show progress using Textual's progress bars:</p> <pre><code>async def copy_large_directory(container: Container):\n    await safe_copy_directory(\n        container,\n        source=\"./template\",\n        destination=\"./new_project\",\n        max_concurrent_copies=5  # Adjust for performance\n    )\n</code></pre>"},{"location":"development/components/#network-path-handling","title":"Network Path Handling","text":"<p>TF Utils includes special handling for Windows network paths through the <code>NetworkPath</code> class.</p>"},{"location":"development/components/#features","title":"Features","text":"<ul> <li>Automatic drive letter remapping</li> <li>Support for common TFBern network shares</li> <li>Path validation</li> <li>Fallback mechanisms</li> </ul>"},{"location":"development/components/#network-share-mappings","title":"Network Share Mappings","text":"<pre><code>_network_mappings = {\n    \"T:\": \"t_lernende\",\n    \"N:\": \"n_home-s\",\n    \"S:\": \"s_mitarbeiter\",\n    \"U:\": \"u_archiv\",\n}\n</code></pre>"},{"location":"development/components/#usage-example","title":"Usage Example","text":"<pre><code>from src.lib.paths import NetworkPath\n\n# Automatically handles remapping\npath = NetworkPath(\"T:\\\\my_project\")\nif path.is_valid:\n    # Use the path\n</code></pre>"},{"location":"development/components/#error-handling","title":"Error Handling","text":"<p>The system includes comprehensive error handling with user-friendly messages:</p> <pre><code>try:\n    await safe_copy_directory(container, source, dest)\nexcept Exception as e:\n    await container.mount(Label(f\"[red]Error: {str(e)}[/red]\"))\n</code></pre>"},{"location":"development/components/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Always Use Async/Await <pre><code>@interface(\"My Command\")\nasync def my_command(container: Container):\n    # Use async operations\n</code></pre></p> </li> <li> <p>Progress Feedback <pre><code>await console.print(container, \"[blue]Processing...[/blue]\")\n# ... operation ...\nawait console.print(container, \"[green]Complete![/green]\")\n</code></pre></p> </li> <li> <p>Error Handling <pre><code>try:\n    result = await operation()\nexcept Exception as e:\n    await console.print(container, f\"[red]Error: {str(e)}[/red]\")\n</code></pre></p> </li> <li> <p>Input Validation <pre><code>name = await ask_input(\n    container,\n    \"Enter name\",\n    regex=r\"^[A-Za-z0-9_-]+$\"\n)\n</code></pre></p> </li> <li> <p>Network Path Handling <pre><code>path = NetworkPath(user_input)\nif not path.is_valid:\n    await console.print(container, \"[red]Invalid network path[/red]\")\n</code></pre></p> </li> </ol>"},{"location":"development/components/#contributing-new-components","title":"Contributing New Components","text":"<p>When adding new components:</p> <ol> <li>Place them in the appropriate module:</li> <li>User interaction \u2192 <code>console.py</code></li> <li>File operations \u2192 <code>utils.py</code></li> <li>Path handling \u2192 <code>paths.py</code></li> <li> <p>New commands \u2192 <code>interfaces/</code></p> </li> <li> <p>Follow the async pattern:    <pre><code>async def new_component(container: Container, ...):\n    # Implementation\n</code></pre></p> </li> <li> <p>Include proper error handling and progress feedback</p> </li> <li> <p>Add docstrings with examples:    <pre><code>def my_function():\n    \"\"\"\n    Component description.\n\n    Example:\n    ```python\n    result = await new_component(container)\n    ```\n    \"\"\"\n    pass\n</code></pre></p> </li> </ol>"},{"location":"development/creating-features/","title":"Creating New Features","text":"<p>TF Utils uses a simple yet powerful plugin system based on Python decorators. Any function decorated with <code>@interface</code> in the <code>interfaces/</code> directory automatically becomes available in the menu!</p>"},{"location":"development/creating-features/#interface-structure","title":"Interface Structure","text":"<p>Each interface is an async function that receives a Textual <code>Container</code> as a parameter. This container is used for rendering the interface elements and handling user interaction.</p>"},{"location":"development/creating-features/#basic-interface-template","title":"Basic Interface Template","text":"<pre><code>from pathlib import Path\nfrom textual.containers import Container\nfrom src.lib.interface import interface\nfrom src.lib.console import ask_input\nfrom src.lib.utils import console\n\n\n@interface(\"Your Feature Name\")\nasync def your_feature(container: Container):\n    \"\"\"\n    Your feature description.\n\n    Detailed explanation of what your feature does.\n    You can use markdown formatting in this docstring.\n\n    ## Section Example:\n    - Point 1\n    - Point 2\n    \"\"\"\n    # Your code here\n    pass\n</code></pre>"},{"location":"development/creating-features/#key-components","title":"Key Components","text":""},{"location":"development/creating-features/#the-interface-decorator","title":"The Interface Decorator","text":"<pre><code>@interface(\"Display Name\", activate=True)\n</code></pre> <ul> <li>Takes a string parameter that defines how your feature appears in the menu</li> <li>Handles registration and integration with the main menu system</li> <li>Set <code>activate=False</code> to disable the feature by default</li> <li>Use <code>activate=True</code> to enable the feature by default</li> <li><code>activate</code> can also be a function that returns a boolean</li> </ul>"},{"location":"development/creating-features/#container-parameter","title":"Container Parameter","text":"<pre><code>async def your_feature(container: Container):\n</code></pre> <ul> <li>The <code>container</code> parameter is a Textual UI container where your interface can render</li> <li>Used for all user interaction and display elements</li> </ul>"},{"location":"development/creating-features/#documentation","title":"Documentation","text":"<p>Every interface should include a detailed docstring that:</p> <ul> <li>Explains what the feature does</li> <li>Lists any requirements or prerequisites</li> <li>Documents any special behavior or options</li> <li>Uses markdown formatting for better readability</li> </ul>"},{"location":"development/creating-features/#user-interaction-tools","title":"User Interaction Tools","text":""},{"location":"development/creating-features/#input-prompts","title":"Input Prompts","text":"<pre><code>value = await ask_input(\n    container,\n    \"Description or question for the user\"\n)\n</code></pre>"},{"location":"development/creating-features/#console-output","title":"Console Output","text":"<pre><code>await console.print(container, \"[green]Success message![/green]\")\nawait console.print(container, \"[red]Error message![/red]\")\n</code></pre>"},{"location":"development/creating-features/#complete-example","title":"Complete Example","text":"<p>Here's a complete example that creates a new Obsidian vault with pre-configured settings:</p> <pre><code>from pathlib import Path\nfrom textual.containers import Container\nfrom src.lib.console import ask_input\nfrom src.lib.interface import interface\nfrom src.lib.utils import console, safe_copy_directory\n\n\n@interface(\"Neuen Obsidian Vault erstellen\")\nasync def create_new_obsidian_vault(container: Container):\n    \"\"\"\n    Erstelle einen neuen Obsidian Vault.\n\n    Dieses Interface erstellt einen neuen Obsidian Vault im aktuellen Verzeichnis.\n    Dieser neue Vault enth\u00e4lt bereits grundlegende Einstellungen und Plugins f\u00fcr\n    eine bessere Obsidian-Erfahrung.\n\n    ## Plugin Liste:\n    - Excalidraw\n    - Numerals\n    - Better Word Count\n    - OZ Calendar\n    - Obsidian Banners\n    - Obsidian File Cleaner\n    - Quick Add\n    - Table Editor\n    - Code Block Customizer\n    \"\"\"\n    # Get vault name from user\n    vault_name = await ask_input(\n        container, \"Vault Name\", \"Wie soll dein neuer Vault hei\u00dfen?\"\n    )\n\n    # Create vault directory\n    base_dir = Path().cwd()\n    vault_dir = base_dir / vault_name\n\n    # Check if directory already exists\n    if vault_dir.exists():\n        await console.print(container, \"[red]Vault directory already exists![/red]\")\n        return\n\n    # Create directory and copy template\n    vault_dir.mkdir()\n    current_dir = Path(__file__).parent\n    obsidian_template_dir = current_dir / \"ObsidianTemplate\"\n\n    await safe_copy_directory(\n        container, obsidian_template_dir, vault_dir, max_concurrent_copies=20\n    )\n\n    await console.print(container, \"[green]Vault created successfully![/green]\")\n</code></pre>"},{"location":"development/creating-features/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Error Handling</p> <ul> <li>Always check for existing files/directories before creating them</li> <li>Use clear error messages with appropriate colors</li> <li>Handle exceptions gracefully</li> </ul> </li> <li> <p>User Feedback</p> <ul> <li>Provide clear prompts for user input</li> <li>Show progress for long-running operations</li> <li>Confirm successful completion</li> </ul> </li> <li> <p>Code Organization</p> <ul> <li>Keep interface functions focused on a single task</li> <li>Use descriptive variable names</li> <li>Follow the project's coding style</li> </ul> </li> <li> <p>Documentation</p> <ul> <li>Write clear, detailed docstrings</li> <li>Include examples where appropriate</li> <li>Document any assumptions or limitations</li> </ul> </li> </ol>"},{"location":"development/creating-features/#adding-your-feature","title":"Adding Your Feature","text":"<ol> <li>Create a new Python file in the appropriate location under <code>interfaces/</code></li> <li>Define your interface function with the <code>@interface</code> decorator</li> <li>Write comprehensive docstrings</li> <li>Implement your feature using the provided utilities</li> <li>Test thoroughly</li> <li>Submit a pull request</li> </ol>"},{"location":"development/creating-features/#advanced-topics","title":"Advanced Topics","text":""},{"location":"development/creating-features/#concurrent-operations","title":"Concurrent Operations","text":"<p>When performing multiple operations (like file copies), you can use the <code>max_concurrent_copies</code> parameter to control concurrency:</p> <pre><code>await safe_copy_directory(\n    container,\n    source_dir,\n    target_dir,\n    max_concurrent_copies=20\n)\n</code></pre>"},{"location":"development/creating-features/#nested-interfaces","title":"Nested Interfaces","text":"<p>You can create nested menu structures by organizing your interface files in subdirectories:</p> <pre><code>interfaces/\n\u251c\u2500\u2500 Office/\n\u2502   \u251c\u2500\u2500 word.py\n\u2502   \u2514\u2500\u2500 excel.py\n\u2514\u2500\u2500 Development/\n    \u251c\u2500\u2500 altium.py\n    \u2514\u2500\u2500 uvision.py\n</code></pre>"},{"location":"development/creating-features/#custom-utilities","title":"Custom Utilities","text":"<p>If you need functionality not provided by the existing utilities, consider:</p> <ol> <li>Adding it to the appropriate utility module</li> <li>Creating a new utility module if it's a new category of functionality</li> <li>Discussing with the team for larger additions</li> </ol> <p>Remember to maintain backward compatibility and follow the project's coding standards when adding new utilities.</p>"},{"location":"development/getting-started/","title":"Getting Started with Development","text":"<p>This guide will walk you through setting up your development environment for contributing to TF Utils. Whether you're looking to fix bugs, add new features, or improve documentation, this guide will help you get started.</p>"},{"location":"development/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following tools installed on your system:</p>"},{"location":"development/getting-started/#required-tools","title":"Required Tools","text":"<ul> <li>Python: Version 3.10<ul> <li>Download from python.org</li> <li>Verify installation: <code>python --version</code></li> </ul> </li> <li>Git: Latest stable version<ul> <li>Download from git-scm.com</li> <li>Verify installation: <code>git --version</code></li> </ul> </li> <li>Poetry: Dependency manager<ul> <li>Download from python-poetry.org</li> <li>Or via PowerShell:     <pre><code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n</code></pre></li> <li>Verify installation: <code>poetry --version</code></li> </ul> </li> </ul>"},{"location":"development/getting-started/#optional-tools","title":"Optional Tools","text":"<ul> <li>Inno Setup: Only needed if you plan to build installers<ul> <li>Download from jrsoftware.org/isinfo.php</li> <li>Required for creating Windows installers</li> </ul> </li> <li>PyCharm Community Edition: IDE for Python development<ul> <li>Download from jetbrains.com/pycharm/download</li> <li>Recommended for easier development</li> </ul> </li> </ul>"},{"location":"development/getting-started/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<p>Follow these steps to set up your local development environment:</p>"},{"location":"development/getting-started/#1-fork-the-repository","title":"1. Fork the Repository","text":"<ol> <li>Visit the TF Utils Repository</li> <li>Click the \"Fork\" button in the top-right corner</li> <li>Wait for GitHub to create your copy of the repository</li> </ol>"},{"location":"development/getting-started/#2-clone-your-fork","title":"2. Clone Your Fork","text":"<pre><code># Clone your forked repository\ngit clone https://github.com/[your-username]/tfUtils.git\n\n# Navigate to the project directory\ncd tfUtils\n</code></pre>"},{"location":"development/getting-started/#4-configure-poetry","title":"4. Configure Poetry","text":"<p>Set up Poetry for optimal usage with the project:</p> <pre><code># Configure Poetry to create virtual environments in the project directory\npoetry config virtualenvs.in-project true\n\n# Install project dependencies\npoetry install\n</code></pre>"},{"location":"development/getting-started/#5-install-pre-commit-hooks","title":"5. Install Pre-commit Hooks","text":"<p>We use pre-commit hooks to ensure code quality. Install them with:</p> <pre><code># Install pre-commit hooks\npoetry run pre-commit install\n\n# Run hooks against all files to verify installation\npoetry run pre-commit run --all-files\n</code></pre>"},{"location":"development/getting-started/#development-tools","title":"Development Tools","text":"<p>TF Utils uses several tools to maintain code quality:</p> <ul> <li> <p>Black: Code formatter</p> <ul> <li>Enforces consistent code style</li> </ul> </li> <li> <p>isort: Import sorter</p> <ul> <li>Organizes import statements</li> </ul> </li> <li> <p>Ruff: Linter</p> <ul> <li>Checks for common issues</li> </ul> </li> <li> <p>pre-commit: Git hooks</p> <ul> <li>Runs all checks before commits</li> <li>Automatically formats code</li> <li>Prevents committing invalid code</li> </ul> </li> </ul>"},{"location":"development/getting-started/#verifying-your-setup","title":"Verifying Your Setup","text":"<p>To ensure everything is set up correctly:</p> <ol> <li>Run the development version:</li> </ol> <pre><code>poetry run python main.py\n</code></pre> <ol> <li>Check code formatting:</li> </ol> <pre><code>poetry run pre-commit run --all-files\n</code></pre>"},{"location":"development/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that your development environment is set up, you can:</p> <ol> <li>Learn about our Development Workflow</li> <li>Explore the Project Structure</li> <li>Read about Creating Features</li> </ol>"},{"location":"development/getting-started/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues during setup:</p> <ol> <li>Search existing GitHub Issues</li> <li>Ask for help in Discussions</li> <li>Create a new issue if the problem persists</li> </ol>"},{"location":"development/structure/","title":"Project Structure","text":"<p>This document explains the organization and structure of the TF Utils codebase. Understanding this structure is essential for contributing to the project effectively.</p>"},{"location":"development/structure/#overview","title":"Overview","text":"<p>The TF Utils project follows a modular architecture designed for clarity and extensibility. Here's the high-level structure:</p> <pre><code>tfUtils/\n\u251c\u2500\u2500 docs/              # Documentation\n\u2502   \u251c\u2500\u2500 development/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 interfaces/    # Command implementations\n\u2502   \u2502   \u251c\u2500\u2500 Office/    # Office-related commands\n\u2502   \u2502   \u251c\u2500\u2500 Altium/    # Altium-related commands\n\u2502   \u2502   \u2514\u2500\u2500 ...        # Other command categories\n\u2502   \u2514\u2500\u2500 lib/           # Core utilities\n\u2502       \u251c\u2500\u2500 console.py # User interaction utilities\n\u2502       \u251c\u2500\u2500 utils.py   # File operations\n\u2502       \u2514\u2500\u2500 paths.py   # Path handling\n\u251c\u2500\u2500 tests/             # Test suite\n\u2502   \u251c\u2500\u2500 test_console.py\n\u2502   \u251c\u2500\u2500 test_utils.py\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 build.py          # Build script\n\u251c\u2500\u2500 main.py           # Entry point\n\u251c\u2500\u2500 mkdocs.yml        # MKDocs configuration\n\u2514\u2500\u2500 pyproject.toml    # Project configuration\n</code></pre>"},{"location":"development/structure/#key-directories-and-files","title":"Key Directories and Files","text":""},{"location":"development/structure/#src-directory","title":"<code>/src</code> Directory","text":"<p>The main source code directory contains all the core functionality of TF Utils.</p>"},{"location":"development/structure/#srcinterfaces","title":"<code>/src/interfaces</code>","text":"<p>This directory contains all the command implementations that appear in the TF Utils menu. Each file or subdirectory here represents a menu item or category.</p> <pre><code># Example interface structure\ninterfaces /\n\u251c\u2500\u2500 hello_world.py          # Main menu: \"Say Hello\"\n\u251c\u2500\u2500 new_project.py          # Main menu: \"New Project\"\n\u251c\u2500\u2500 Office /                # Creates \"Office\" submenu\n\u2502   \u251c\u2500\u2500 info.md             # Info page for \"Office\" submenu\n\u2502   \u251c\u2500\u2500 create_document.py  # Submenu: \"Create Document\"\n\u2502   \u2514\u2500\u2500 templates.py        # Submenu: \"Manage Templates\"\n\u2514\u2500\u2500 Altium /                # Creates \"Altium\" submenu\n    \u251c\u2500\u2500 info.md             # Info page for \"Altium\" submenu\n    \u251c\u2500\u2500 create_project.py   # Submenu: \"Create Project\"\n    \u2514\u2500\u2500 templates.py        # Submenu: \"Manage Templates\"\n</code></pre> <p>The directory structure directly influences the menu hierarchy in the application. Subdirectories create submenus, making it easy to organize related commands.</p> <p>For better user experience, each folder should contain an <code>info.md</code> file with a brief description of the submenu.</p>"},{"location":"development/structure/#srclib","title":"<code>/src/lib</code>","text":"<p>Contains core utility functions and classes used throughout the application:</p> <ul> <li><code>console.py</code>: Provides wrappers for the textual user interface</li> <li><code>utils.py</code>: Provides file system operations like copying files, copying directories, downloading files, etc.</li> <li><code>paths.py</code>: Manages path handling and validation for network paths</li> </ul>"},{"location":"development/structure/#tests-directory","title":"<code>/tests</code> Directory","text":"<p>Contains the test suite organized to mirror the structure of the <code>src</code> directory. Each module in <code>src</code> should have a corresponding test file.</p> <p>Currently, this directory is not implemented. We plan to add tests in the future.</p> <pre><code>tests/\n\u251c\u2500\u2500 interfaces/\n\u2502   \u251c\u2500\u2500 test_hello_world.py\n\u2502   \u2514\u2500\u2500 Office/\n\u2502       \u2514\u2500\u2500 test_create_document.py\n\u2514\u2500\u2500 lib/\n    \u251c\u2500\u2500 test_console.py\n    \u251c\u2500\u2500 test_utils.py\n    \u2514\u2500\u2500 test_paths.py\n</code></pre>"},{"location":"development/structure/#root-files","title":"Root Files","text":"<ul> <li><code>main.py</code>: Application entry point</li> <li><code>build.py</code>: Handles building the executable and installer</li> <li><code>pyproject.toml</code>: Project metadata and dependencies</li> <li><code>poetry.lock</code>: Locked dependencies for reproducible builds</li> <li><code>mkdocs.yml</code>: Configuration for the documentation site</li> </ul>"},{"location":"development/structure/#adding-new-features","title":"Adding New Features","text":"<p>When adding new features to TF Utils, follow these structural guidelines:</p> <ol> <li> <p>New Commands</p> <ul> <li>Add new command files in <code>/src/interfaces</code></li> <li>Use subdirectories for related command groups</li> <li>Follow the naming convention</li> </ul> </li> <li> <p>New Utilities</p> <ul> <li>Add general utilities to <code>/src/lib/utils.py</code></li> <li>Create new modules in <code>/src/lib</code> for distinct functionality</li> </ul> </li> <li> <p>Tests</p> <ul> <li>Create corresponding test files in <code>/tests</code></li> <li>Match the source directory structure</li> </ul> </li> </ol>"},{"location":"development/structure/#module-organization","title":"Module Organization","text":"<p>Each Python module should follow this general organization:</p> <pre><code>\"\"\"Module docstring explaining purpose and usage.\"\"\"\n\n# Standard library imports\nimport os\nimport sys\n\n# Third-party imports\nimport click\nimport rich\n\n# Local imports\nfrom src.lib import console\nfrom src.lib import utils\n\n# Constants\nDEFAULT_TIMEOUT = 30\nTEMPLATE_DIR = \"templates\"\n\n\n# Classes\nclass MyClass:\n    \"\"\"Class docstring.\"\"\"\n    pass\n\n\n# Functions\ndef my_function():\n    \"\"\"Function docstring.\"\"\"\n    pass\n</code></pre>"},{"location":"development/structure/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Directory Structure</p> <ul> <li>Keep related files together in appropriate subdirectories</li> <li>Use clear, descriptive names for files and directories</li> <li>Maintain parallel structure between source and tests</li> </ul> </li> <li> <p>Module Organization</p> <ul> <li>Follow the import order: standard library, third-party, local</li> <li>Group related functionality together</li> <li>Use docstrings for all modules, classes, and functions</li> </ul> </li> <li> <p>Feature Organization</p> <ul> <li>Place new features in appropriate subdirectories</li> <li>Create new subdirectories for related feature groups</li> <li>Keep interface files focused on a single responsibility</li> </ul> </li> </ol>"},{"location":"development/structure/#next-steps","title":"Next Steps","text":"<ul> <li>Review the Development Workflow guide</li> <li>Learn about Creating Features</li> <li>Understand the Key Components of the system</li> </ul>"},{"location":"development/workflow/","title":"Development Workflow","text":"<p>This guide explains our development process and best practices for contributing to TF Utils. Following these guidelines helps maintain code quality and ensures a smooth collaboration experience.</p>"},{"location":"development/workflow/#overview","title":"Overview","text":"<p>Our development workflow follows these main steps:</p> <ol> <li>Create a feature branch</li> <li>Develop and test your changes</li> <li>Submit a pull request</li> <li>Review process</li> <li>Merge and release</li> </ol>"},{"location":"development/workflow/#detailed-workflow","title":"Detailed Workflow","text":""},{"location":"development/workflow/#1-setting-up-your-branch","title":"1. Setting Up Your Branch","text":"<p>Always start your work by creating a new feature branch from the latest <code>main</code>:</p> <pre><code># Ensure you're up to date\ngit fetch origin\ngit checkout master\ngit pull origin master\n\n# Create and switch to a new branch\ngit checkout -b feature/my-new-feature\n</code></pre>"},{"location":"development/workflow/#branch-naming-conventions","title":"Branch Naming Conventions","text":"<p>Follow these patterns for branch names:</p> <ul> <li><code>feature/</code> - For new features</li> <li><code>fix/</code> - For bug fixes</li> <li><code>docs/</code> - For documentation changes</li> <li><code>refactor/</code> - For code restructuring</li> <li><code>test/</code> - For adding or updating tests</li> </ul> <p>Example: <code>feature/altium-template-support</code></p>"},{"location":"development/workflow/#2-development-process","title":"2. Development Process","text":""},{"location":"development/workflow/#making-changes","title":"Making Changes","text":"<ol> <li>Write your code following our style guidelines</li> <li>Add or update tests as needed</li> <li>Update documentation to reflect your changes</li> <li>Ensure all pre-commit checks pass</li> </ol>"},{"location":"development/workflow/#local-testing","title":"Local Testing","text":"<pre><code># Run the program locally\npoetry run python main.py\n\n# Run all tests (currently pytest is not implemented)\npoetry run pytest\n\n# Run pre-commit checks (REQUIRED)\npoetry run pre-commit run --all-files\n</code></pre> <p>\ud83d\udca1 Tip: Create a <code>testing</code> folder in your root directory. Then instead of running <code>poetry run python main.py</code>, move to the <code>testing</code> folder and run <code>poetry run python ../main.py</code>.</p>"},{"location":"development/workflow/#commit-guidelines","title":"Commit Guidelines","text":"<p>We follow the Conventional Commits specification:</p> <pre><code># Format:\n# type(scope): description\n\n# Examples:\ngit commit -m \"feat(ui): add new project template selector\"\ngit commit -m \"fix(paths): handle network paths correctly\"\ngit commit -m \"docs: update installation instructions\"\n</code></pre> <p>Common types:</p> <ul> <li><code>feat</code>: New feature</li> <li><code>fix</code>: Bug fix</li> <li><code>docs</code>: Documentation changes</li> <li><code>style</code>: Code style changes (formatting, etc.)</li> <li><code>refactor</code>: Code changes that neither fix bugs nor add features</li> <li><code>test</code>: Adding or updating tests</li> <li><code>chore</code>: Maintenance tasks</li> </ul>"},{"location":"development/workflow/#3-submitting-your-work","title":"3. Submitting Your Work","text":""},{"location":"development/workflow/#preparing-for-pull-request","title":"Preparing for Pull Request","text":"<p>Before submitting:</p> <ol> <li>Ensure all tests pass</li> <li>Run pre-commit checks</li> <li>Update documentation if needed</li> <li>Write a clear PR description</li> </ol> <pre><code># Final checks (pytest is not implemented)\npoetry run pytest\npoetry run pre-commit run --all-files\n\n# Push to your fork\ngit push origin feature/my-new-feature\n</code></pre>"},{"location":"development/workflow/#creating-the-pull-request","title":"Creating the Pull Request","text":"<ol> <li>Go to the TF Utils Repository</li> <li>Click \"Pull requests\" \u2192 \"New Pull Request\"</li> <li>Select your feature branch</li> <li>Fill in the PR template:<ul> <li>Clear description of changes</li> <li>Related issue numbers</li> <li>Testing performed</li> <li>Screenshots (if UI changes)</li> <li>Breaking changes (if any)</li> </ul> </li> </ol>"},{"location":"development/workflow/#4-review-process","title":"4. Review Process","text":""},{"location":"development/workflow/#what-to-expect","title":"What to Expect","text":"<ol> <li>Automated checks will run</li> <li>Maintainers will review your code</li> <li>You may receive change requests</li> <li>Discussion may occur in PR comments</li> </ol>"},{"location":"development/workflow/#handling-feedback","title":"Handling Feedback","text":"<ol> <li>Review all comments</li> <li>Make requested changes in new commits</li> <li>Push updates to your branch</li> <li>Respond to review comments</li> <li>Request re-review when ready</li> </ol> <pre><code># After making changes\ngit add .\ngit commit -m \"fix: address review comments\"\ngit push origin feature/my-new-feature\n</code></pre>"},{"location":"development/workflow/#5-merging-and-cleanup","title":"5. Merging and Cleanup","text":"<p>Once approved:</p> <ol> <li>The Maintainer will merge your PR</li> <li>You will delete your feature branch</li> <li>And pull the latest main branch</li> </ol> <pre><code>git checkout master\ngit pull origin master\ngit branch -d feature/my-new-feature\n</code></pre>"},{"location":"development/workflow/#best-practices","title":"Best Practices","text":""},{"location":"development/workflow/#code-quality","title":"Code Quality","text":"<ul> <li>Write clear, self-documenting code</li> <li>Add comments for complex logic</li> <li>Keep functions focused and small</li> <li>Use meaningful variable names</li> <li>Follow type hints and docstrings</li> </ul>"},{"location":"development/workflow/#testing","title":"Testing","text":"<ul> <li>Write tests for new features</li> <li>Update tests for bug fixes</li> <li>Aim for good coverage</li> <li>Test edge cases</li> <li>Use meaningful test names</li> </ul>"},{"location":"development/workflow/#documentation","title":"Documentation","text":"<ul> <li>Update docs with code changes</li> <li>Add examples for new features</li> <li>Keep README current</li> <li>Document breaking changes</li> <li>Include inline documentation</li> <li>Check for spelling and grammar</li> </ul>"},{"location":"development/workflow/#communication","title":"Communication","text":"<ul> <li>Be responsive to feedback</li> <li>Ask questions when unclear</li> <li>Explain complex changes</li> <li>Keep PR discussions focused</li> <li>Be respectful and professional</li> </ul>"}]}